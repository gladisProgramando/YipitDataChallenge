# docker-compose.yaml (Corregido y adaptado para Windows)

# Define un bloque común de configuración para los servicios de Airflow
x-airflow-common: &airflow-common
  # --- AÑADIR ESTA LÍNEA ---
  build: . # Indica que se debe construir usando el Dockerfile en el directorio actual (.)
  # ------------------------
  # Usa la imagen personalizada construida desde Dockerfile
  image: yipitdata-airflow-assignment:latest # Nombre que tendrá la imagen construida
  env_file:
    - .env # Carga variables de entorno desde el archivo .env
  volumes:
    # Monta los directorios locales en el contenedor
    - ./dags:/opt/airflow/dags:ro # DAGs (solo lectura)
    - ./logs:/opt/airflow/logs     # Logs (lectura/escritura)
    - ./output:/opt/airflow/output # Carpeta de salida (lectura/escritura)
    # - ./plugins:/opt/airflow/plugins:ro # Descomentar si usas plugins

services:
  # Servicio de Base de Datos PostgreSQL
  postgres:
    image: postgres:13 # Usa imagen oficial de Postgres 13
    container_name: yipitdata-postgres
    # ... (resto de la configuración de postgres sin cambios) ...
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Servicio Webserver de Airflow (Interfaz de Usuario)
  airflow-webserver:
    <<: *airflow-common # Hereda la configuración común (incluyendo build: .)
    container_name: yipitdata-airflow-webserver
    # ... (resto de la configuración de webserver sin cambios) ...
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # Servicio Scheduler de Airflow (Ejecuta tareas programadas)
  airflow-scheduler:
    <<: *airflow-common # Hereda la configuración común (incluyendo build: .)
    container_name: yipitdata-airflow-scheduler
    # ... (resto de la configuración de scheduler sin cambios) ...
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # Servicio de Inicialización de Airflow (Prepara la BD y crea usuario)
  airflow-init:
    <<: *airflow-common # Hereda la configuración común (incluyendo build: .)
    container_name: yipitdata-airflow-init
    # ... (resto de la configuración de init sin cambios) ...
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init && \
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    restart: on-failure
    depends_on:
       postgres:
         condition: service_healthy

# Define volúmenes nombrados para persistencia
volumes:
  airflow-db-volume: